<?php
// $Id$

/**
 * @file
 * see getInfo() for test summary
 */

require_once(drupal_get_path('module', 'ldap_user') . '/tests/LdapUserTestCase.class.php');

class LdapUserBasicTests extends LdapUserTestCase {
  public static function getInfo() {
    return array(
      'name' => 'LDAP User Tests: Basic Tests',
      'description' => 'Test ldap user.  Basic functionality tests.',
      'group' => 'LDAP User'
    );
  }

  /**
   * just make sure install succeeds.
   */
  function testSimpleStuff() {
    $this->ldapTestId = $this->module_name . ': setup success';
    // just to give warning if setup doesn't succeed.  may want to take these out at some point.
    $setup_success = (
        module_exists('ldap_user') &&
        module_exists('ldap_servers') &&
        (variable_get('ldap_simpletest', 0) == 1)
      );
    $this->assertTrue($setup_success, ' ldap_user setup successful', $this->ldapTestId);


    $this->ldapTestId = $this->module_name . ': test for api functions';
    // no need for prep for this.
    $api_functions = array(
      'ldap_user_provision_drupal_account' => array(4, 1),
    );

    foreach ($api_functions as $api_function_name => $param_count) {
      $reflector = new ReflectionFunction($api_function_name);
      $this->assertTrue(
        function_exists($api_function_name) &&
        $param_count[1] == $reflector->getNumberOfRequiredParameters() &&
        $param_count[0] == $reflector->getNumberOfParameters()
        , ' api function ' . $api_function_name . ' parameters and required parameters count unchanged.', $this->ldapTestId);
    }

    $this->ldapTestId = $this->module_name . ': cron test';
    $this->assertTrue(drupal_cron_run(), t('Cron can run with ldap user enabled.'), $this->ldapTestId);


    /**
    * authorizations are tested in ldap_authorization.Derivations.test
    *
    * this is geared toward testing logon functionality
    */

    $this->ldapTestId = 'UserAttachedFields';
    // assert that all user entity attached fields are attached


}

/**
 * test variations on drupal user account creation/provisioning and updating
 */
function testUserProvision() {

  $this->ldapTestId = 'UserProvision';
  $this->serversData = 'ldapauthor1.ldap_server.test_data.inc';
  $this->prepTestData();


  // create user with user_save with no ldap data specified and make sure its derived

  // create user with user_save with all ldap data specified and make sure it overrides defaults

  // test for provisioning of confict in puid and correct errors thrown

  // test for provisioning with conflict username

  // test for provisioning with conflict in ldap, but not drupal users or puid


}

}
