<?php
// $Id$

/**
 * @file
 * see getInfo() for test summary
 */


module_load_include('php', 'ldap_test', 'LdapUserTestCase.class');

class LdapUserFunctionalTests extends LdapUserTestCase {
  public static function getInfo() {
    return array(
      'name' => 'LDAP User Tests: Basic Functional Tests',
      'description' => 'Test ldap user.  Event handling functions such as logon, user update, etc.',
      'group' => 'LDAP User'
    );
  }

/**
 * test variations on drupal user account creation/provisioning and updating
 * these are not api calls, they are actual user create, user edit, user logon etc
 * events being tested.  api calls are tested in testFunctionsAndInstall()
 */
function testUserProvision() {

 // $this->ldapTestId = 'UserProvision';
 // $this->serversData = 'activedirectory.ldif';
 // $this->prepTestData();


  // create user with user_save with no ldap data specified and make sure its derived

  // create user with user_save with all ldap data specified and make sure it overrides defaults

  // test for provisioning of confict in puid and correct errors thrown

  // test for provisioning with conflict username

  // test for provisioning with conflict in ldap, but not drupal users or puid

  // test webservices for provisioning



}
}


class LdapUserBasicTests extends LdapUserTestCase {
  public static function getInfo() {
    return array(
      'name' => 'LDAP User Tests: Basic Function Tests',
      'description' => 'Test ldap user.  Basic functionality tests.',
      'group' => 'LDAP User'
    );
  }


  /**
   * make sure install succeeds and ldap user functions/methods work
   */
  function testFunctionsAndInstall() {

    $this->ldapTestId = $this->module_name . ': setup success';

    // just to give warning if setup doesn't succeed.  may want to take these out at some point.
    $setup_success = (
        module_exists('ldap_user') &&
        module_exists('ldap_servers') &&
        (variable_get('ldap_simpletest', 0) == 1)
      );
    $this->assertTrue($setup_success, ' ldap_user setup successful', $this->ldapTestId);


    $this->ldapTestId = $this->module_name . ': test for functions';
    // no need for prep for this.
    $api_functions = array(
      'ldap_user_conf' => array(2, 0),
    );

    foreach ($api_functions as $api_function_name => $param_count) {
      $reflector = new ReflectionFunction($api_function_name);
      $this->assertTrue(
        function_exists($api_function_name) &&
        $param_count[1] == $reflector->getNumberOfRequiredParameters() &&
        $param_count[0] == $reflector->getNumberOfParameters()
        , ' api function ' . $api_function_name . ' parameters and required parameters count unchanged.', $this->ldapTestId);
    }

    $this->ldapTestId = $this->module_name . ': cron test';
    $this->assertTrue(drupal_cron_run(), t('Cron can run with ldap user enabled.'), $this->ldapTestId);

    $sids = array('activedirectory');
    $this->prepTestData($sids, 'default', 'default');


    $this->ldapTestId = $this->module_name . ': construct ldap_user_conf object';
    $ldap_user_conf = ldap_user_conf('admin', TRUE);
    $this->assertTrue(is_object($ldap_user_conf), t('ldap_conf class instanticated'), $this->ldapTestId);


    // test basic ldap user functions
    $synch_context = LDAP_USER_SYNCH_CONTEXT_AUTHENTICATE_DRUPAL_USER;

    $account = NULL;
    $user_edit = array('name' => 'jkeats');
    $this->ldapTestId = $this->module_name . ': provisionDrupalAccount function test';

    $jkeats = $ldap_user_conf->provisionDrupalAccount($account, $user_edit, LDAP_USER_SYNCH_CONTEXT_INSERT_DRUPAL_USER, NULL, TRUE);
  //  debug('jkeats user afterprovisionDrupalAccount'); debug($jkeats);

    $jkeats = user_load_by_name('jkeats');

    $properties_set = (
      $jkeats->name == 'jkeats' &&
      $jkeats->mail == 'boygen@hotmail.com' &&
      $jkeats->init == 'boygen@hotmail.com' &&
      $jkeats->status == 1
    );
    $this->assertTrue($properties_set, t('user name, mail, init, and status correctly populated for jkeats'), $this->ldapTestId);

    $fields_set = (
      isset($jkeats->ldap_user_puid['und'][0]['value']) &&
      $jkeats->ldap_user_puid['und'][0]['value'] == 'e2eb4d760f81e89df1524cff71f720a0' &&
      isset($jkeats->ldap_user_puid_property['und'][0]['value']) &&
      $jkeats->ldap_user_puid_property['und'][0]['value'] == 'pixotechcomregistryuniqueid' &&
      isset($jkeats->ldap_user_puid_sid['und'][0]['value']) &&
      $jkeats->ldap_user_puid_sid['und'][0]['value'] == 'activedirectory' &&
      isset($jkeats->ldap_user_current_dn['und'][0]['value']) &&
      $jkeats->ldap_user_current_dn['und'][0]['value'] == 'CN=jkeats,CN=Users,DC=activedirectory,DC=ldap,DC=pixotech,DC=com'
    );
    $this->assertTrue($fields_set, t('user ldap_user_puid, ldap_user_puid_property, ldap_user_puid_sid, and  ldap_user_current_dn correctly populated for jkeats'), $this->ldapTestId);


    $data_diff = array_diff(
      $jkeats->data['ldap_authentication'],
      array (
      'init' =>
        array (
          'sid' => 'activedirectory',
          'dn' => NULL,
          'mail' => 'boygen@hotmail.com',
        ),
      )
     );
    $this->assertTrue(count($data_diff) == 0, t('user->data array correctly populated for jkeats'), $this->ldapTestId);
    // test account exists with correct username, mail, fname, puid, puidfield, dn

    // change some user mock ldap data first, (mail and fname) then synch
    $account = user_load_by_name('jkeats');
    $user_edit = NULL;
    $this->testFunctions->setFakeServerUserAttribute('activedirectory', 'CN=jkeats,CN=Users,DC=activedirectory,DC=ldap,DC=pixotech,DC=com', 'mail', 'boygen@yahoo.com', 0);
    $user = $ldap_user_conf->synchToDrupalAccount($account, $user_edit, LDAP_USER_SYNCH_CONTEXT_UPDATE_DRUPAL_USER, NULL, TRUE);

    $jkeats = user_load_by_name('jkeats');
    $this->assertTrue($jkeats->mail == 'boygen@yahoo.com', t('synchToDrupalAccount worked for property (mail) for jkeats'), $this->ldapTestId);


     // test account exists with correct username, mail, fname, puid, puidfield, dn
  //  debug('jkeats after user synchToDrupalAccount'); debug($jkeats);


    // delete and recreate test account to make sure account is in correct state
    $ldap_user_conf->deleteDrupalAccount('jkeats', LDAP_USER_SYNCH_CONTEXT_DELETE_DRUPAL_USER);
    $account = NULL;
    $user_edit = array('name' => 'jkeats');
    $jkeats = $ldap_user_conf->provisionDrupalAccount($account, $user_edit, LDAP_USER_SYNCH_CONTEXT_INSERT_DRUPAL_USER, NULL, TRUE);

    /**
     * test that $ldap_user_conf->synchToDrupalAccount() works for various contexts.
     * make sure changing when a given field/property is flagged for a particular context, everything works
     * should test one property and one field as well as username, puid, and mail
     */

    $test =  array(
      'user' => 'jkeats',
      'field' => 'field.field_lname',
      'field_values' => array('johnny', 'jonathon'),
      'field_mapping' => array(
        'sid' => 'activediretory',
        'ldap_source' => 'givenname',
        'convert' => 0,
        'direction' => LDAP_USER_SYNCH_DIRECTION_TO_DRUPAL_USER,
        'notes' => 'notes',
        'contexts' => array(LDAP_USER_SYNCH_CONTEXT_INSERT_DRUPAL_USER),
        'name' => 'Field: Last Name',
        'configurable' => 1,
        'enabled' => TRUE,
        'config_module' => 'ldap_user',
        'synch_module' => 'ldap_user',
      ),

      'property' => 'property.mail',
      'property_values' => array('jkeats@hotmail.com', 'jkeats@yahoo.com'),
      'property_mapping' => array(
        'sid' => 'activediretory',
        'ldap_source' => 'mail',
        'convert' => 0,
        'direction' => LDAP_USER_SYNCH_DIRECTION_TO_DRUPAL_USER,
        'notes' => 'notes',
        'contexts' => array(LDAP_USER_SYNCH_CONTEXT_INSERT_DRUPAL_USER),
        'name' => 'Property: Mail',
        'configurable' => 0,
        'enabled' => TRUE,
        'config_module' => 'ldap_servers',
        'synch_module' => 'ldap_user',
      ),
    );

    $test_contexts = array(
      LDAP_USER_SYNCH_CONTEXT_UPDATE_DRUPAL_USER,
      LDAP_USER_SYNCH_CONTEXT_AUTHENTICATE_DRUPAL_USER,
      LDAP_USER_SYNCH_CONTEXT_CRON,
      LDAP_USER_SYNCH_CONTEXT_DELETE_DRUPAL_USER,
      LDAP_USER_SYNCH_CONTEXT_DISABLE_DRUPAL_USER,
    );

    $sid = $sids[0];
    foreach ($test_contexts  as $i => $context) {
      foreach (array(1, 0) as $flagged_for_synch) {
        // Test 1: make sure that synchToDrupalAccount() method works for field and property for appropriate context
        debug("test context: $context, flagged for synch:" . (int)$flagged_for_synch);


        // Test 1.  Clear out user and settings for mapping
        unset($ldap_user_conf->synchMapping[$sid][$test['property']]);
        unset($ldap_user_conf->synchMapping[$sid][$test['field']]);
        $ldap_user_conf->save();
        $jkeats = user_load_by_name('jkeats');
        if (is_object($jkeats)) {
          user_delete($jkeats->uid);
        }
        $account = NULL;
        $user_edit = array('name' => 'jkeats');
        $this->ldapTestId = $this->module_name . ': provisionDrupalAccount function test';
        $jkeats = $ldap_user_conf->provisionDrupalAccount($account, $user_edit, LDAP_USER_SYNCH_CONTEXT_INSERT_DRUPAL_USER, NULL, TRUE);

        // Test 1.A set mappings for field and property being tested
        $ldap_user_conf->synchMapping[$sid][$test['property']] = $test['property_mapping'];
        $ldap_user_conf->synchMapping[$sid][$test['field']] = $test['field_mapping'];
        $ldap_user_conf->save();


        // Test 1.B change fake ldap values for field and property
        $this->testFunctions->setFakeServerUserAttribute(
          'activedirectory',
          'CN=jkeats,CN=Users,DC=activedirectory,DC=ldap,DC=pixotech,DC=com',
          $test['property'],
          $test['property_values'][0],
          0);
        $this->testFunctions->setFakeServerUserAttribute(
          'activedirectory',
          'CN=jkeats,CN=Users,DC=activedirectory,DC=ldap,DC=pixotech,DC=com',
          $test['field'],
          $test['field_values'][0],
          0);



        $jkeats = user_load_by_name('jkeats');
        debug('intial load'); debug($jkeats);
        $user_edit = array();
        // Test 1.C Do synch for given context
        $ldap_user_conf->synchToDrupalAccount($account, $user_edit, $context, NULL, TRUE);

        // TEST 1.D: check that field and property were altered correctly given context
        $jkeats = user_load_by_name('jkeats');
        debug('after user synch'); debug($jkeats);

        // Test 2:  Make sure synch does not occur when no context given
        // disable synching for property and field in given context
        $ldap_user_conf->synchMapping[$sid][$test['property']]['contexts'] = array();
        $ldap_user_conf->synchMapping[$sid][$test['field']]['contexts'] = array();
        $ldap_user_conf->save();

        // change fake ldap values for field and property
        $this->testFunctions->setFakeServerUserAttribute(
          'activedirectory',
          'CN=jkeats,CN=Users,DC=activedirectory,DC=ldap,DC=pixotech,DC=com',
          $test['property'],
          $test['property_values'][1],
          0);
        $this->testFunctions->setFakeServerUserAttribute(
          'activedirectory',
          'CN=jkeats,CN=Users,DC=activedirectory,DC=ldap,DC=pixotech,DC=com',
          $test['field'],
          $test['field_values'][1],
          0);

        debug('before user false synch'); debug($jkeats);
        $user_edit = array('name' => 'jkeats');
        $jkeats = user_load_by_name('jkeats');
        $ldap_user_conf->synchToDrupalAccount($jkeats, $user_edit, $context, NULL, TRUE);
        debug('after user false synch'); debug($jkeats);
        // TEST #2: check that field and property were not altered

      }
    }

}



}



class LdapUserUITests extends LdapUserTestCase {

  public static function getInfo() {
    return array(
      'name' => 'LDAP User Tests: User Interface',
      'description' => 'Test ldap user admin interface.',
      'group' => 'LDAP User'
    );
  }

  /**
   * make sure user admin interface works.  (its a beast)
   */
  function testUI() {

    $this->ldapTestId = $this->module_name . ': user interface tests';

    // just to give warning if setup doesn't succeed.  may want to take these out at some point.
    $setup_success = (
        module_exists('ldap_user') &&
        module_exists('ldap_servers') &&
        (variable_get('ldap_simpletest', 0) == 1)
      );
    $this->assertTrue($setup_success, ' ldap_user setup successful', $this->ldapTestId);

    $sids = array('activedirectory');
    $this->prepTestData($sids, 'default', 'default');


    $this->privileged_user = $this->drupalCreateUser(array(
      'administer site configuration',
      ));
    $this->drupalLogin($this->privileged_user);

    $ldap_user_conf = ldap_user_conf();
  //  debug('ldap_user_conf before form submission'); debug($ldap_user_conf);


    $this->drupalGet('admin/config/people/ldap/user');

    // Populate the field settings with new settings.
    $sid = 'activedirectory';
    $wsKey = 'sdafjlksjadsdafjkksdafjsdfsdjfsdf';
    $wsUserIps = array('1.2.3.4');
    $edit = array(
      'provisionServers[' . $sid . ']' => 1,
      'provisionMethods[' . LDAP_USER_CONFLICT_LOG . ']' => 1,
      'provisionMethods[' . LDAP_USER_CONFLICT_RESOLVE . ']' => 1,
      'provisionMethods[' . LDAP_USER_CONFLICT_RESOLVE_DEFAULT . ']' => 1,
      'userConflictResolve' => LDAP_USER_CONFLICT_LOG,
      'acctCreation' => LDAP_USER_ACCT_CREATION_LDAP_BEHAVIOR_DEFAULT,
      'wsEnabled'  => 1,
      'wsActions[create]' => 1,
      'wsActions[synch]' => 1,
      'wsActions[disable]' => 1,
      'wsActions[delete]' => 1,
      'wsUserIps' => join("\n", $wsUserIps),
      'wsKey' => $wsKey,

      'sm__ldap_source__7' => 'sn',
      'sm__convert__7' => 0,
      'sm__direction__7' => 1,
      'sm__user_target__7' => 'field.field_lname',
      'sm__1__7' => 1,
      'sm__2__7' => 1,
      'sm__3__7' => 1,
      'sm__4__7' => 1,

      'sm__ldap_source__8' => 'givenname',
      'sm__convert__8' => 0,
      'sm__direction__8' => 1,
      'sm__user_target__8' => 'field.field_fname',
      'sm__1__8' => 1,
      'sm__2__8' => 1,
      'sm__3__8' => 1,
      'sm__4__8' => 1,

    );

    $this->drupalPost('admin/config/people/ldap/user', $edit, t('Save'));

    $ldap_user_conf = ldap_user_conf();
    $this->assertTrue($ldap_user_conf->sids['activedirectory'] == 1, t('Server field set correctly'), $this->ldapTestId);
    $this->assertTrue(
      $ldap_user_conf->provisionMethods[0] == LDAP_USER_PROV_ON_LOGON &&
      $ldap_user_conf->provisionMethods[1] == LDAP_USER_PROV_ON_MANUAL_ACCT_CREATE &&
      $ldap_user_conf->provisionMethods[2] == LDAP_USER_PROV_ON_ALL_USER_CREATION
      , t('provision methods field set correctly'), $this->ldapTestId);
    $this->assertTrue($ldap_user_conf->userConflictResolve == LDAP_USER_CONFLICT_LOG, t('Account conflict field set correctly'), $this->ldapTestId);
    $this->assertTrue($ldap_user_conf->acctCreation == LDAP_USER_ACCT_CREATION_LDAP_BEHAVIOR_DEFAULT, t('Account creation field set correctly'), $this->ldapTestId);
    $this->assertTrue($ldap_user_conf->synchMapping[$sid]['field.field_lname']['enabled'] == TRUE &&
      $ldap_user_conf->synchMapping[$sid]['field.field_lname']['direction'] == 1 &&
      $ldap_user_conf->synchMapping[$sid]['field.field_lname']['source'] == 'sn',
       t('Synch mapping for field.field_lname  field set correctly'), $this->ldapTestId);
    $this->assertTrue($ldap_user_conf->synchMapping[$sid]['field.field_fname']['enabled'] == TRUE &&
      $ldap_user_conf->synchMapping[$sid]['field.field_lname']['direction'] == 1 &&
      $ldap_user_conf->synchMapping[$sid]['field.field_lname']['source'] == 'givenname',
       t('Synch mapping for field.field_lname  field set correctly'), $this->ldapTestId);
    $this->assertTrue($ldap_user_conf->wsKey == $wsKey, t('wsKey field set correctly'), $this->ldapTestId);
    $this->assertTrue($ldap_user_conf->wsEnabled == 1, t('wsEnabled field set correctly'), $this->ldapTestId);
    $this->assertTrue($ldap_user_conf->wsUserIps[0] == $wsUserIps[0], t('wsUserIps field set correctly'), $this->ldapTestId);

    $this->assertTrue(
      in_array('create',$ldap_user_conf->wsActions) &&
      in_array('synch',$ldap_user_conf->wsActions) &&
      in_array('disable',$ldap_user_conf->wsActions) &&
      in_array('delete',$ldap_user_conf->wsActions)
      , t('wsActions fields set correctly'), $this->ldapTestId);

    
    debug($ldap_user_conf);
/**
 *
 *define('LDAP_USER_PROV_ON_LOGON', 1);
define('LDAP_USER_PROV_ON_MANUAL_ACCT_CREATE', 2);
define('LDAP_USER_PROV_ON_ALL_USER_CREATION', 3);
    $ldap_user_conf = ldap_user_conf();
    debug('ldap_user_conf after form submission'); debug($ldap_user_conf);
    $tests = array(
      'sids' => array(
        'property' => 'sids',
        'expected_value' => array('provisionServers'),
        'form_mapping' => array('provisionServers[]' => array('activedirectory')),
      ),
      'provision_methods' => array(
        'property' => 'provisionMethods',
        'expected_value' => array(1, 2, 3),
        'form_mapping' => array('provisionMethods[]' =>  array(1, 2, 3)),
      ),
      'userConflictResolve' => array(
        'property' => 'userConflictResolve',
        'expected_value' => 2,
        'form_mapping' => array('userConflictResolve' => 2),
      ),

      'acctCreation' => array(
        'property' => 'acctCreation',
        'expected_value' => 4,
        'form_mapping' => array('acctCreation[]' => array(4)),
      ),
      'wsEnabled' => array(
        'property' => 'wsEnabled',
        'expected_value' => array(1),
        'form_mapping' => array('wsEnabled' => 1),
      ),
      'wsActions' => array(
        'property' => 'wsActions',
        'expected_value' =>  array('create', 'synch', 'disable', 'delete'),
        'form_mapping' => array('wsActions[]' => array('create', 'synch', 'disable', 'delete')),
      ),
      'wsUserIps' => array(
        'property' => 'wsUserIps',
        'expected_value' =>  '1.2.3.4',
        'form_mapping' => array('wsUserIps' => '1.2.3.4'),
      ),
      'wsKey' => array(
        'property' => 'wsKey',
        'expected_value' => 'sdafjlksjadsdafjkksdafjsdfsdjfsdf',
        'form_mapping' => array('wsKey' => 'sdafjlksjadsdafjkksdafjsdfsdjfsdf'),
      ),
      'synchMapping' => array(
        'property' => 'synchMapping',
        'expected_value' => array(),
      ),
    );

    foreach ($tests as $test_id => $test) {
      $value = $ldap_user_conf->{$test['property']};
      if (is_array($test['expected_value'])) {
        $diff = array_diff($test['expected_value'], $value);
        $this->assertTrue(count($diff) == 0, "ldap_user_conf $test_id successful", $this->ldapTestId);
      }
      else {
        $this->assertTrue($value == $test['expected_value'], "ldap_user_conf $test_id successful", $this->ldapTestId);
      }
    }

**/
    // load on user conf class and test values!

    // test form with non default values for all fields


  }


}
