<?php

/**
 * @file
 * Module for the LDAP User Entity
 *
 */

define('LDAP_USER_DRUPAL_HELP_URL', 'http://drupal.org/node/997082');


define('LDAP_USER_PROV_ON_LOGON', 1);
define('LDAP_USER_PROV_ON_MANUAL_ACCT_CREATE', 2);
define('LDAP_USER_PROV_ON_ALL_USER_CREATION', 3);

define('LDAP_USER_CONFLICT_LOG', 1);
define('LDAP_USER_CONFLICT_RESOLVE', 2);
define('LDAP_USER_CONFLICT_RESOLVE_DEFAULT', 2);

define('LDAP_USER_ACCT_CREATION_LDAP_BEHAVIOR', 4);
define('LDAP_USER_ACCT_CREATION_USER_SETTINGS_FOR_LDAP', 1);
define('LDAP_USER_ACCT_CREATION_LDAP_BEHAVIOR_DEFAULT', 4);

require_once('ldap_user.api.inc');


/**
 * Implements hook_menu().
 */
function ldap_user_menu() {
  $items = array();

  $items['admin/config/people/ldap/user'] = array(
    'title' => '3. User',
    'description' => 'Settings related to user provisioning and data synching between ldap and drupal users.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_user_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'ldap_user.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */

function ldap_user_help($path, $arg) {

  $authentication_help = t('LDAP user configuration determines how and when
    Drupal accounts are provisioned/created from LDAP data and what user fields
    are derived from LDAP.!helplink.',
          array(
            '!helplink' => l(LDAP_USER_DRUPAL_HELP_URL, LDAP_USER_DRUPAL_HELP_URL),
          ));

  switch ($path) {
    case 'admin/config/people/ldap/user':
      $output = '<p>' . $authentication_help . '</p>';
      return $output;

    case 'admin/help#ldap_user':
      $output = '<p>' . $authentication_help . '</p>';
      return $output;
  }
}


/**
 * Implements hook_user_presave().
 */
function ldap_user_user_presave(&$edit, $account, $category) {

  // not likely to be useful.  hook_user_insert and hook_user_update have clearer contexts for provisioning
}

/**
 * Implements hook_user_login().
 */
function ldap_user_user_login(&$edit, $account) {


}

/**
 * Implements hook_user_insert().
 */
function ldap_user_user_insert($account, $account, $category) {

  //if the following fields are not provided, see if they
  // should be derived automatically and then derive and populate them
  //$edit['ldap_user_puid']['und'][0]['value'] = 'x';
 // $edit['ldap_user_puid_sid']['und'][0]['value'] = 'x';
 // $edit['ldap_user_puid_property']['und'][0]['value'] = 'x';
 // $edit['ldap_user_current_dn']['und'][0]['value'] = 'x';

}

/**
 * Implements hook_user_update().
 */
function ldap_user_user_update($account, $account, $category) {
    //if the following fields are not provided, see if they
  // should be derived automatically ON UPDATE and then derive and populate them
 // $edit['ldap_user_puid']['und'][0]['value'] = 'x';
 // $edit['ldap_user_puid_sid']['und'][0]['value'] = 'x';
 // $edit['ldap_user_puid_property']['und'][0]['value'] = 'x';
 // $edit['ldap_user_current_dn']['und'][0]['value'] = 'x';

}


/**
 * Implements hook_user_delete().
 */
function ldap_user_user_delete($account) {


}



/**
 * @return default value for field user->ldap_user_provisioned_sid
 */
function ldap_user_provisioned_sid_default($entity_type, $entity, $field, $instance, $langcode) {
  return NULL;
}

/**
 * @return default value for field user->ldap_user_provisioned_sid
 */
function ldap_user_puid_default($entity_type, $entity, $field, $instance, $langcode) {
  return NULL;
}
/**
 * @return default value for field user->ldap_user_puid
 */
function ldap_user_puid_property_default($entity_type, $entity, $field, $instance, $langcode) {
  return NULL;
}
/**
 * @return default value for field user->ldap_user_dn
 */
function ldap_user_dn_default($entity_type, $entity, $field, $instance, $langcode) {
  return NULL;
}

/**
 * Implements hook_field_widget_info().
 */
function ldap_user_field_widget_info() {
  return array(
    'ldap_user_hidden' => array(
      'label' => t('Hidden Text Field'),
      'field types' => array('text'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function ldap_user_field_widget_settings_form($field, $instance) {
  return array();
}

/**
 * Implements hook_field_widget_form().
 */
function ldap_user_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $main_widget = array();

  switch ($instance['widget']['type']) {
    case 'ldap_user_hidden':
      $element['value'] = $element + array(
        '#type' => 'hidden',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
      );
      break;
  }

  return $element;
}



/**
 * Implements hook_permission().
 */
function ldap_user_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer ldap users' => array(
      'title' => t('Create, Edit and Delete LDAP Provisioned Users'),
      'description' => t('Create, Edit and Delete LDAP Provisioned Users'),
    ),
    'edit user ldap fields' => array(
      'title' => t('Edit User LDAP Fields'),
      'description' => t('Edit User LDAP Fields'),
    ),
  );

  return $permissions;
}

