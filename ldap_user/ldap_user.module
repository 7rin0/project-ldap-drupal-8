<?php

/**
 * @file
 * Module for the LDAP User Entity
 *
 */

require_once('ldap_user.api.inc');

/**
 * Implements hook_user_presave().
 */
function ldap_user_user_presave(&$edit, $account, $category) {

  // not likely to be useful.  hook_user_insert and hook_user_update have clearer contexts for provisioning
}

/**
 * Implements hook_user_login().
 */
function ldap_user_user_login(&$edit, $account) {


}

/**
 * Implements hook_user_insert().
 */
function ldap_user_user_insert($account, $account, $category) {

  //if the following fields are not provided, see if they
  // should be derived automatically and then derive and populate them
  //$edit['ldap_user_puid']['und'][0]['value'] = 'x';
 // $edit['ldap_user_puid_sid']['und'][0]['value'] = 'x';
 // $edit['ldap_user_puid_property']['und'][0]['value'] = 'x';
 // $edit['ldap_user_current_dn']['und'][0]['value'] = 'x';

}

/**
 * Implements hook_user_update().
 */
function ldap_user_user_update($account, $account, $category) {
    //if the following fields are not provided, see if they
  // should be derived automatically ON UPDATE and then derive and populate them
 // $edit['ldap_user_puid']['und'][0]['value'] = 'x';
 // $edit['ldap_user_puid_sid']['und'][0]['value'] = 'x';
 // $edit['ldap_user_puid_property']['und'][0]['value'] = 'x';
 // $edit['ldap_user_current_dn']['und'][0]['value'] = 'x';

}


/**
 * Implements hook_user_delete().
 */
function ldap_user_user_delete($account) {


}



/**
 * @return default value for field user->ldap_user_provisioned_sid
 */
function ldap_user_provisioned_sid_default($entity_type, $entity, $field, $instance, $langcode) {
  return NULL;
}

/**
 * @return default value for field user->ldap_user_provisioned_sid
 */
function ldap_user_puid_default($entity_type, $entity, $field, $instance, $langcode) {
  return NULL;
}
/**
 * @return default value for field user->ldap_user_puid
 */
function ldap_user_puid_property_default($entity_type, $entity, $field, $instance, $langcode) {
  return NULL;
}
/**
 * @return default value for field user->ldap_user_dn
 */
function ldap_user_dn_default($entity_type, $entity, $field, $instance, $langcode) {
  return NULL;
}

/**
 * Implements hook_field_widget_info().
 */
function ldap_user_field_widget_info() {
  return array(
    'ldap_user_hidden' => array(
      'label' => t('Hidden Text Field'),
      'field types' => array('text'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function ldap_user_field_widget_settings_form($field, $instance) {
  return array();
}

/**
 * Implements hook_field_widget_form().
 */
function ldap_user_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $main_widget = array();

  switch ($instance['widget']['type']) {
    case 'ldap_user_hidden':
      $element['value'] = $element + array(
        '#type' => 'hidden',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
      );
      break;
  }

  return $element;
}



/**
 * Implements hook_permission().
 */
function ldap_user_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer ldap users' => array(
      'title' => t('Create, Edit and Delete LDAP Provisioned Users'),
      'description' => t('Create, Edit and Delete LDAP Provisioned Users'),
    ),
    'edit user ldap fields' => array(
      'title' => t('Edit User LDAP Fields'),
      'description' => t('Edit User LDAP Fields'),
    ),
  );

  return $permissions;
}

