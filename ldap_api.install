<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the LDAP API module.
 */

/**
 * Implementation of hook_install().
 */
function ldap_api_install() {
  variable_set('ldap_api_encryption','none');
  variable_set('ldap_api_require_ssl_for_credentails',0);
  drupal_install_schema('ldap_api');
}

/**
 * Implementation of hook_uninstall().
 */
function ldap_api_uninstall() {
  variable_del('ldap_api_encryption');
  variable_del('ldap_api_require_ssl_for_credentails');
  drupal_uninstall_schema('ldap_api');
}

/**
 * Implementation of hook_requirements().
 */
function ldap_api_requirements($phase) {
  $requirements = array();
  $requirements['ldap_extension_loaded']['title'] = t('LDAP Extension Loaded');
  if(extension_loaded('ldap')) {
    $requirements['ldap_extension_loaded']['value'] = t('Passed');
    $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_OK;
  } else {
    $requirements['ldap_extension_loaded']['value'] = t('Failed');
    $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_ERROR;
    $requirements['ldap_extension_loaded']['description'] = t('No LDAP Extension is loaded for PHP, so LDAP API will not work properly.');
  }
  return $requirements;
}


/**
 * Implementation of hook_schema().
 */
function ldap_api_schema() {
  $schema['ldap_servers'] = array(
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'address' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'port' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 389,
      ),
      'tls' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'basedn' => array(
        'type' => 'text',
      ),
      'binddn' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'bindpw' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'active' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'weight' =>  array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('sid'),
    'unique keys' => array('name' => array('name')),
  );
  $schema['ldap_options'] = array(
    'fields' => array(
      'oid' => array(
        'type' => 'serial',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'key' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('oid'),
  );
  $schema['ldap_mapping'] = array(
    'fields' => array(
      'mid' => array(
        'type' => 'serial',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'field' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'attribute' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('mid'),
  );
  return $schema;
}



// vim:fenc=utf-8:ft=php:ai:si:ts=2:sw=2:et:
