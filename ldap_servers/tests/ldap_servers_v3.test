<?php
// $Id: user.test,v 1.111 2010/12/18 00:56:18 dries Exp $

/**
 * @file
 * simpletest for ldap servers
 */


ldap_servers_module_load_include('php', 'ldap_test', 'LdapTestCasev3.class');

class LdapServersTestCase extends LdapTestCasev3 {
  public static function getInfo() {
    return array(
      'name' => 'LDAP Servers Tests v3',
      'description' => 'Test ldap servers.  Servers module is primarily a storage
        tool for ldap server configuration, so most of testing is just form and db testing.
        there are some api like functions that are also tested.',
      'group' => 'LDAP Servers'
    );
  }

  function __construct($test_id = NULL) {
    parent::__construct($test_id);
  }
  
  public $module_name = 'ldap_servers';
  protected $ldap_test_data;

  /**
   *  create one or more server configurations in such as way
   *  that this setUp can be a prerequisite for ldap_authentication and ldap_authorization
   */
  
  function setUp() {
    variable_set('ldap_simpletest', 2);
   // variable_set('ldap_help_watchdog_detail', 1);
    parent::setUp(array('ldap_servers','ldap_test'));
    //$this->ldap_user_create_user_test_entity_fields();
  }

  function tearDown() {
    parent::tearDown();
    variable_del('ldap_help_watchdog_detail');
    variable_del('ldap_simpletest');
  }

  public function testApiFunctions() {
    $group = 'ldap_servers: functions';
    $sid = 'openldap1';
    $this->prepTestData('hogwarts', array($sid));
    $test_data = variable_get('ldap_test_server__' . $sid, array());
   // debug('test_data'); debug(array_keys($test_data));
    foreach (array('properties') as $key) { // 'csv','ldap',
      debug($key); debug($test_data[$key]);
    }
    
    debug("ldap_simpletest=" . variable_get('ldap_simpletest', FALSE));

    ldap_servers_module_load_include('php', 'ldap_test', 'LdapServerTestv2.class');
    $ldap_server = LdapServerTestv2::getLdapServerObjects($sid, NULL, TRUE);
   // foreach ($servers['all'] as $_sid => $ldap_server) {
   //   if ($ldap_server->status == 1) {
   //     $servers['enabled'][$_sid] = $ldap_server;
    //  }
   // }
    
   // $ldap_server = ldap_servers_get_servers($sid, NULL, TRUE);
    debug('ldap_server'); debug($ldap_server); 
    
    // check against csv data rather than ldap array to make sure csv to ldap conversion is correct
    $user_csv_entry = $test_data['csv']['users']['101'];
    $user_dn = $user_csv_entry['dn'];
    $user_cn = $user_csv_entry['cn'];
    $user_ldap_entry = $test_data['ldap'][$user_dn];
    
    $username = $ldap_server->userUsernameFromLdapEntry($user_ldap_entry);
    $this->assertTrue($username == $user_csv_entry['cn'], 'LdapServer::userUsernameFromLdapEntry works when LdapServer::user_attr attribute used', $group);
 
    $bogus_ldap_entry = array();
    $username = $ldap_server->userUsernameFromLdapEntry($bogus_ldap_entry);
    $this->assertTrue($username === FALSE, 'LdapServer::userUsernameFromLdapEntry fails correctly', $group);
    
    $username = $ldap_server->userUsernameFromDn($user_dn);
    $this->assertTrue($username == $user_cn, 'LdapServer::userUsernameFromDn works when LdapServer::user_attr attribute used', $group);

    $username = $ldap_server->userUsernameFromDn('bogus dn');
    $this->assertTrue($username === FALSE, 'LdapServer::userUsernameFromDn fails correctly', $group);
   
   debug('need to actually provision user for following tests to work');
   // this should be tested with all forms of user (username, userdn, user object, user ldapentry)
   $groups_not_nested = @$ldap_server->groupMembershipsFromUser($user_cn, 'group_dns', FALSE);
   debug($groups_not_nested);
   
    $groups_nested = @$ldap_server->groupMembershipsFromUser($user_ldap_entry, 'group_dns', TRUE);
    debug($groups_not_nested);


    $this->assertTrue(TRUE, 'test assertion', 'group');
    

  }


  public function x_testInstall() {
    $group = 'ldap_servers: install and uninstall';
    $install_tables = array('ldap_servers');
    // disable, uninstall, and enable/install module
    $modules = array($this->module_name);
    module_disable($modules, TRUE); // disable dependent modules
    drupal_uninstall_modules($modules);
    module_enable($modules, TRUE);
    foreach ($install_tables as $table) {
      $this->assertTrue(db_table_exists($table), $table . ' table creates', $group);
    }
    $var_created = $this->assertTrue(TRUE, 'ldap_servers_encryption variable initialized', $group);
    $var_created = $this->assertTrue(variable_get('ldap_servers_encrypt_key', FALSE), 'ldap_servers_encrypt_key variable initialized', $group);

    module_disable($modules, TRUE); // disable dependent modules
    drupal_uninstall_modules($modules);
    foreach ($install_tables as $table) {
      $this->assertFalse(db_table_exists($table), $table . ' table removed', $group);
    }
    $var_created = $this->assertFalse(variable_get('ldap_servers_encryption', FALSE), 'ldap_servers_encryption variable removed', $group);
    $var_created = $this->assertFalse(variable_get('ldap_servers_encrypt_key', FALSE), 'ldap_servers_encrypt_key variable removed', $group);


    // test tokens, see http://drupal.org/node/1245736
    $ldap_entry = array(
      'dn' => 'cn=jdoe,ou=campus accounts,ou=toledo campus,dc=ad,dc=myuniveristy,dc=edu',
      'mail' => array( 0 => 'jdoe@myuniversity.edu', 'count' => 1),
      'sAMAccountName' => array( 0 => 'jdoe', 'count' => 1),
      'dept' => array( 0 => 'physics', 1 => 'chemistry', 'count' => 2),
      'count' => 3,
    );
    
    $this->ldapTestId = 'ldap_server.tokens';
    
    $dn = ldap_servers_token_replace($ldap_entry, '[dn]');
    $this->assertTrue( $dn == $ldap_entry['dn'], t('[dn] token worked on ldap_servers_token_replace().'), $this->ldapTestId);
    
    $dept1 = ldap_servers_token_replace($ldap_entry, '[dept:1]');
    $this->assertTrue( $dept1 == 'chemistry', t('[dept:1] token worked on ldap_servers_token_replace().'), $this->ldapTestId);
    
    $sAMAccountName = ldap_servers_token_replace($ldap_entry, '[samaccountname:0]');
    $this->assertTrue($sAMAccountName == $ldap_entry['sAMAccountName'][0], t('[samaccountname:0] token worked on ldap_servers_token_replace().'), $this->ldapTestId);
 
    $sAMAccountName2 = ldap_servers_token_replace($ldap_entry, '[samaccountname]');
    $this->assertTrue($sAMAccountName2 == $ldap_entry['sAMAccountName'][0], t('[samaccountname] token worked on ldap_servers_token_replace().'), $this->ldapTestId);

    $sAMAccountName3 = ldap_servers_token_replace($ldap_entry, '[sAMAccountName]');
    $this->assertTrue($sAMAccountName2 == $ldap_entry['sAMAccountName'][0], t('[sAMAccountName] token worked on ldap_servers_token_replace().'), $this->ldapTestId);
  
  
    module_enable($modules, TRUE);
  }
  
    public function x_testUIForms() {

    variable_del('ldap_simpletest'); // need to be out of fake server mode to test ui.
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer site configuration',
      ));
    $this->drupalLogin($this->privileged_user);

    $ctools_originally_enabled = module_exists('ctools');
    // because ctools has different method of saving and loading data, need to test ui with and without ctools

    foreach (array('ctools', 'noctools') as $i => $mode) {
      $this->ldapTestId = 'ServerUI.ctools.' . $mode;
      if ($mode == 'ctools' && !module_exists('ctools')) {
        module_enable(array('ctools'), TRUE);
        if (!module_exists('ctools')) {
          $this->assertTrue(FALSE, 'Could not enable ctools.  It is needed for some test coverage', $this->ldapTestId);
          debug('could not enable ctools');
          continue;
        }
      }
      elseif ($mode == 'noctools' && module_exists('ctools')) {
        module_disable(array('ctools'));
      }
    //  debug('module list'); debug(module_list());

      // keep in mind that these fake real ldap servers will conflict
      // with the real fake ldap servers and need to be removed if any
      // testing besides the UI needs to be done before another setup()
      // is called.



      $sid = 'server1';
      $server_data = array();
      $server_data[$sid] = array(
        'sid'        => array($sid, $sid),
        'name'       => array("Server $sid", "My Server $sid"),
        'status'     => array(1, 1),
        'ldap_type'  => array('openldap', 'ad'),
        'address'    => array("${sid}.ldap.fake", "${sid}.ldap.fake"),
        'port'       => array(389, 7000),
        'tls'        => array(TRUE, FALSE),
        'bind_method' => array(1, 3),
        'binddn'  => array('cn=service_account,dc=a,dc=b,dc=org', ''),
        'bindpw'  => array('sdfsdafsdfasdf', ''),
        'basedn' => array('cn=accounts,dc=a,dc=b,dc=org', 'cn=campus accounts,dc=a,dc=b,dc=org', array('cn=accounts,dc=a,dc=b,dc=org'), array('cn=campus accounts,dc=a,dc=b,dc=org')),
        'user_attr' => array('sAMAccountName', 'blah'),
        'account_name_attr' => array('sAMAccountName', 'blah'),
        'mail_attr' => array('mail', ''),
        'mail_template' => array('' , '[email]'),
        'unique_persistent_attr' => array('dn', 'uniqueregistryid'),
        'user_dn_expression' => array('cn=%cn,%basedn', 'cn=%username,%basedn'),
        'ldap_to_drupal_user' => array('code', 'different code'),
        'testing_drupal_username' => array('johndoe', 'janedoe'),
        'group_object_category' => array('group', 'groupofentries'),
        'search_pagination' => array(1, 0),
        'search_page_size' => array(1000, ''),
      );


      if (!ldap_servers_php_supports_pagination()) {
        unset( $server_data[$sid]['search_pagination']);
        unset( $server_data[$sid]['search_page_size']);
      }

      if (!module_exists('php')) {
        unset( $server_data[$sid]['ldap_to_drupal_user']);
      }

      /** add server conf test **/
      $this->drupalGet('admin/config/people/ldap/servers/add');

      $edit = array();
      foreach ($server_data['server1'] as $input_name => $input_values) {
        $edit[$input_name] = $input_values[0];
      }
     // debug('edit array for server add test'); debug($edit);
      $this->drupalPost('admin/config/people/ldap/servers/add', $edit, t('Add'));
    //  debug('server row count2' . $this->serverConfCount());
      $field_to_prop_map = LdapServer::field_to_properties_map();
      $field_to_prop_map['bindpw'] = 'bindpw';
      $ldap_servers = ldap_servers_get_servers(NULL, 'all', FALSE, TRUE);
     // debug('ldap servers'); debug($ldap_servers);
      $this->assertTrue(count(array_keys($ldap_servers)) == 1, 'Add form for ldap server added server.',  $this->ldapTestId . ' Add Server');
      $this->assertText('LDAP Server Server server1 added', 'Add form confirmation message',  $this->ldapTestId . ' Add Server');
      // assert one ldap server exists in db table

      // assert load of server has correct properties for each input
      $mismatches = $this->compareFormToProperties($ldap_servers['server1'], $server_data['server1'], 0, $field_to_prop_map);
      if (count($mismatches)) {
        debug('mismatches between ldap server properties and form submitted values'); debug($mismatches);
      }
      $this->assertTrue(count($mismatches) == 0, 'Add form for ldap server properties match values submitted.',  $this->ldapTestId . ' Add Server');


      /** update server conf test **/

      $this->drupalGet('admin/config/people/ldap/servers/edit/server1');

      $edit = array();
      foreach ($server_data['server1'] as $input_name => $input_values) {
        $edit[$input_name] = $input_values[1];
      }
      unset($edit['sid']);
      unset($edit['bindpw']);
     // debug('edit array for server update test'); debug($edit);
      $this->drupalPost('admin/config/people/ldap/servers/edit/server1', $edit, t('Update'));
     // debug('server row count3' . $this->serverConfCount());
      $ldap_servers = ldap_servers_get_servers(NULL, 'all', FALSE, TRUE);
     // debug('ldap servers'); debug($ldap_servers);
      $this->assertTrue(count(array_keys($ldap_servers)) == 1, 'Update form for ldap server didnt delete or add another server.',  $this->ldapTestId . '.Update Server');
      // assert confirmation message without error
      // assert one ldap server exists in db table
      // assert load of server has correct properties for each input
      unset($server_data['server1']['bindpw']);
      $mismatches = $this->compareFormToProperties($ldap_servers['server1'], $server_data['server1'], 1, $field_to_prop_map);
      if (count($mismatches)) {
        debug('mismatches between ldap server properties and form submitted values'); debug($mismatches);
      }
      $this->assertTrue(count($mismatches) == 0, 'Update form for ldap server properties match values submitted.',  $this->ldapTestId . '.Update Server');


      /** delete server conf test **/
      $this->drupalGet('admin/config/people/ldap/servers/delete/server1');
      $this->drupalPost('admin/config/people/ldap/servers/delete/server1', array(), t('Delete'));
    //  debug('server row count4' . $this->serverConfCount());
      $ldap_servers = ldap_servers_get_servers(NULL, 'all', FALSE, TRUE);
    //  debug('ldap servers'); debug($ldap_servers);
      $this->assertTrue(count(array_keys($ldap_servers)) == 0, 'Delete form for ldap server deleted server.',  $this->ldapTestId . '.Delete Server');
    }
    if (!$ctools_originally_enabled) {
      module_disable(array('ctools'), FALSE);
    }
    variable_set('ldap_help_watchdog_detail', 1); // return to fake server mode
 }

  public function serverConfCount() {
    $records = db_query('SELECT * FROM {ldap_servers}')->fetchAllAssoc('sid');
    return count(array_keys($records));
  }

  public function compareFormToProperties($object, $data, $item_id, $map, $testid = '') {

    $mismatches = array();

    foreach ($data as $field_id => $values) {
      if (!isset($map[$field_id])) {
        debug("no mapping for field: $field_id in test $testid");
        continue;
      }
      $property = $map[$field_id];
      if (!property_exists($object, $property)) {
        debug("property $property does not exist in object in test $testid");
        continue;
      }
      $property_value = $object->{$property};

      $property_value_show = (is_scalar($property_value)) ? $property_value : serialize($property_value);
      $field_value = isset($values[$item_id + 2]) ? $values[$item_id + 2] : $values[$item_id]; // for cases where string input is not same as array.
      $field_value_show = (is_scalar($field_value)) ? $field_value : serialize($field_value);
      //debug("property name $property "); debug($property_value); debug("field id: $field_id"); debug($field_value);
      if (is_array($property_value) && is_array($field_value)) {
        $pass = count(array_diff($property_value, $field_value)) == 0;
      }
      elseif (is_scalar($property_value) && is_scalar($field_value)) {
        $pass = ($property_value == $field_value);
      }
      else {
        $pass = FALSE;
      }
      if (!$pass) {
       // debug($property_value); debug($field_value);
        $mismatches[] = "property $property ($property_value_show) does not match field $field_id value ($field_value_show)";
      }
    }

    return $mismatches;
  }
  
  
}
