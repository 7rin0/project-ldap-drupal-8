<?php

/**
 * @file
 * simpletest for Ldap Authorization OG Module
 *
 */
module_load_include('php', 'ldap_test', 'LdapTestCase.class');
require_once(drupal_get_path('module', 'ldap_authorization_og') . '/LdapAuthorizationConsumerOG.class.php');

class LdapAuthorizationOg1Tests extends LdapTestCase {
  
  public $groupEntityType = 'node';
  public $groupBundle = 'group';
  public $groupType = 'node';
  public $group_content_type = NULL;
  public $group_nodes = array();
  public $user1;
  public $consumerType = 'og_group';
  public $module_name = 'ldap_authorization_og';
  protected $ldap_test_data;
  public $customOgRoles = array(
    'dungeon-master' => array('entity_type' => 'node', 'bundle_type' => 'group'),
    'time-keeper' => array('entity_type' => 'node', 'bundle_type' => 'group'),
    );
  
  public static function getInfo() {
    return array(
      'group' => 'LDAP Authorization',
      'name' => 'OG 7.x-1.5 Tests.',
      'description' => 'Test ldap authorization og 1.5',
    );
  }

  function __construct($test_id = NULL) {
    parent::__construct($test_id);
  }
  
  function setUp($addl_modules = array()) {
    parent::setUp(array('ldap_authentication', 'ldap_authorization', 'ldap_authorization_og', 'og_ui'));
    variable_set('ldap_simpletest', 1);

    if (ldap_authorization_og_og_version() != 1) {
      debug('LdapAuthorizationOg1Tests must be run with OG 7.x-1.x');
      return;
    }
    
    $this->user1 = $this->drupalCreateUser();
    $this->groups = array();
    $this->prepTestData(LDAP_TEST_LDAP_NAME, array('activedirectory1'));

  // Create group and group content node types.
    $this->groupBundle = $this->drupalCreateContentType(array(
      'type' => 'group',
      'name' => 'OG Group',
      ))->type;
    og_create_field(OG_GROUP_FIELD, $this->groupEntityType, $this->groupBundle);
    og_create_field(OG_AUDIENCE_FIELD, $this->groupEntityType,  $this->groupBundle);
    
    
    $this->createCustomRoles();
    // create og group for each group in group csv

    $this->testFunctions->populateFakeLdapServerData(LDAP_TEST_LDAP_NAME, 'activedirectory1');
    $this->testFunctions->getCsvLdapData(LDAP_TEST_LDAP_NAME);
    foreach ($this->testFunctions->csvTables['groups'] as $guid => $group) {
      $label = $group['cn'];
      $group_type_obj = $this->drupalCreateContentType(array('name' => $label, 'type' => $label));
      og_create_field(OG_GROUP_FIELD, 'node', $group_type_obj->type);
      $group_node = $this->drupalCreateNode(array(
        'title'    => $label,
        'type'     => $group_type_obj->type,
        'og_group' => array(
           LANGUAGE_NONE => array(
             0 => array(
               'value' =>TRUE
             )
           )
         )
       ));
      $group = og_create_group(array(
        'entity_type' => 'node',
        'etid' => $group_node->nid,
        ));

      $this->group_nodes[$label] = $group_node;
    }

  }

  public function createCustomRoles() {

    foreach ($this->customOgRoles as $og_role_name => $og_role) {
      $role = new stdClass;
      $role->name = $og_role_name;
      $role->gid = 0;
    //  $role->group_type = $og_role['entity_type'];
    //  $role->group_bundle = $og_role['bundle_type'];

      $status = og_role_save($role);
    }

  }

  /**
   * just make sure install succeeds and og and ldap_authorization_og functions work as designed 
   */
  function testBasicFunctionsAndApi() {
    $this->ldapTestId = $this->module_name . ': setup success';
    // just to give warning if setup doesn't succeed.  may want to take these out at some point.
    $setup_success = (
        module_exists('ldap_authentication') &&
        module_exists('ldap_servers') &&
        module_exists('ldap_authorization') &&
        module_exists('ldap_authorization_og') &&
        (variable_get('ldap_simpletest', 0) == 1)
      );
    $this->assertTrue($setup_success, ' ldap_authorizations og setup successful', $this->ldapTestId);

    $this->ldapTestId = $this->module_name . ': cron test';
    $this->assertTrue(drupal_cron_run(), t('Cron can run with ldap authorization og enabled.'), $this->ldapTestId);
    
    debug("this->group_nodes"); debug($this->group_nodes);
    /***
     * I. some basic tests to make sure og module's apis are working before testing ldap_authorization_og
     */
     
    $web_user = $this->drupalCreateUser();
    $this->ldapTestId = $this->module_name . ': og functions';
    // array($group, $group_entity)
    list($og_gryffindor_group, $og_gryffindor_node) =  ldap_authorization_og1_get_group('gryffindor', 'group_name');
    list($og_students_group, $og_students_node) =  ldap_authorization_og1_get_group('students', 'group_name');
    list($og_faculty_group, $og_faculty_node) =  ldap_authorization_og1_get_group('faculty', 'group_name');
    debug('og_gryffindor_node');debug($og_gryffindor_node->nid); debug($og_gryffindor_group->gid);
    debug('og_students_node');debug($og_students_node->nid); debug($og_students_group->gid);
    debug('og_faculty_node');debug($og_faculty_node->nid); debug($og_faculty_group->gid);
    $anonymous_rid = ldap_authorization_og_rid_from_role_name(OG_ANONYMOUS_ROLE);
    $member_rid =    ldap_authorization_og_rid_from_role_name(OG_AUTHENTICATED_ROLE);
    $admin_rid =     ldap_authorization_og_rid_from_role_name(OG_ADMINISTRATOR_ROLE);
    $dungeon_master_rid =     ldap_authorization_og_rid_from_role_name('dungeon-master');
    $time_keeper =     ldap_authorization_og_rid_from_role_name('time-keeper');
    
    debug("anonymous_rid=$anonymous_rid, member_rid=$member_rid,admin_rid=$admin_rid, dungeon_master_rid=$dungeon_master_rid, time_keeper=$time_keeper");
    
    /**
function og_role_grant($gid, $uid, $rid) {
  // Get the existiong user roles.
  $user_roles = og_get_user_roles($gid, $uid);
  if (!in_array($rid, $user_roles)) {
    $role = new stdClass();
    $role->uid = $uid;
    $role->rid = $rid;
    $role->gid = $gid;

    drupal_write_record('og_users_roles', $role);
    module_invoke_all('og_role_grant', $gid, $uid, $rid);
  }
}
**/
    og_role_grant($og_gryffindor_group->gid, $web_user->uid, $member_rid);
    og_role_grant($og_students_group->gid, $web_user->uid, $member_rid);
    og_role_grant($og_faculty_group->gid, $web_user->uid, $member_rid);
    og_role_grant($og_faculty_group->gid, $web_user->uid, $admin_rid);

    /**
     * basic granting tests to make sure og_role_grant, ldap_authorization_og_rid_from_role_name,
     *   and ldap_authorization_og_get_group functions work
     */
    
/**
function og_is_member($gid, $entity_type = 'user', $entity = NULL, $states = array(OG_STATE_ACTIVE)) {
  $entity = og_load_entity($entity_type, $entity);
  $groups = og_get_entity_groups($entity_type, $entity, $states);
  return in_array($gid, $groups);
}
**/
    $ids = array($web_user->uid);
    debug($ids);
    $user_entities = entity_load('user', $ids, array(), TRUE);
    $user_entity = $user_entities[$web_user->uid];
    debug("user_entity"); debug($user_entity);
    $this->assertTrue(og_is_member($og_gryffindor_group->gid, 'user', $user_entity),
       'User is member of Group gryffindor without LDAP (based on og_is_member() function)', $this->ldapTestId);
    $this->assertTrue(ldap_authorization_og1_has_role($og_students_group->gid, $web_user->uid, OG_AUTHENTICATED_ROLE ),
      'User is member of Group students without LDAP (based on ldap_authorization_og_has_role() function)', $this->ldapTestId);
    $this->assertTrue(ldap_authorization_og1_has_role($og_faculty_group->gid, $web_user->uid, OG_AUTHENTICATED_ROLE ),
      'User is member of Group ofaculty without LDAP (based on dap_authorization_og_has_role() function)', $this->ldapTestId);
    $this->assertTrue(ldap_authorization_og1_has_role($og_faculty_group->gid, $web_user->uid, OG_ADMINISTRATOR_ROLE),
      'User is administrator member of Group faculty without LDAP (based on dap_authorization_og_has_role() function)', $this->ldapTestId);

    /***
     * II.A. construct ldapauthorization og object and test methods (ignoring if ldap created or not).
     * unit tests for methods and class without any ldap context.
     */
     

    $this->ldapTestId = $this->module_name . ': LdapAuthorizationConsumerOG class';

    $og_auth = new LdapAuthorizationConsumerOG('og_group');
    $this->assertTrue(is_object($og_auth),
      'Successfully instantiated LdapAuthorizationConsumerOG', $this->ldapTestId);

    $this->assertTrue($og_auth->hasAuthorization($web_user, '2-3'),
      'hasAuthorization() method works for non LDAP provisioned og authorizaiton', $this->ldapTestId);

     $should_haves = array(
      ldap_authorization_og_authorization_id($og_gryffindor_group->gid,     $member_rid,    'node') => 'gryffindor member',
      ldap_authorization_og_authorization_id($og_students_group->gid,      $admin_rid,     'node') => 'faculty member',
      ldap_authorization_og_authorization_id($og_faculty_group->gid,      $member_rid,    'node') => 'faculty admin',
      ldap_authorization_og_authorization_id($og_faculty_group->gid,      $dungeon_master_rid,    'node') => 'faculty dungeon master',

    );
       /***
    foreach ($should_haves as $consumer_id => $descriptor) {
      $this->assertTrue(ldap_authorization_og2_has_consumer_id($consumer_id, $web_user->uid),
         "LdapAuthorizationConsumerOG usersAuthorizations() for $descriptor - $consumer_id", $this->ldapTestId);
    }

    $ldap_entry = NULL;
    $user_data = array();
    $web_user = user_load($web_user->uid, TRUE);

    $faculty_member_consumer_id = ldap_authorization_og_authorization_id($og_faculty_node->nid, $member_rid, 'node');
    $faculty_dungeon_master_consumer_id = ldap_authorization_og_authorization_id($og_faculty_node->nid, $dungeon_master_rid, 'node');
    $this->assertTrue(ldap_authorization_og2_has_consumer_id($faculty_dungeon_master_consumer_id, $web_user->uid),
      "LdapAuthorizationConsumerOG has faculty member role BEFORE authorizationRevoke() test revoke on member role $faculty_dungeon_master_consumer_id", $this->ldapTestId);


    $consumers = array($faculty_dungeon_master_consumer_id => $og_auth->emptyConsumer);
    $og_auth->authorizationRevoke($web_user, $user_data, $consumers, $ldap_entry, TRUE);
    $result = ldap_authorization_og2_has_consumer_id($faculty_dungeon_master_consumer_id, $web_user->uid);
    $this->assertFalse($result,
      "LdapAuthorizationConsumerOG authorizationRevoke() test revoke on member role $faculty_dungeon_master_consumer_id", $this->ldapTestId);

    $faculty_dungeon_master_consumer_id = ldap_authorization_og_authorization_id($og_faculty_node->nid, $dungeon_master_rid, 'node');
    $consumers =  array($faculty_dungeon_master_consumer_id => $og_auth->emptyConsumer);
    $og_auth->authorizationRevoke($web_user, $user_data, $consumers, $ldap_entry, TRUE);
    $this->assertFalse(ldap_authorization_og2_has_consumer_id($faculty_dungeon_master_consumer_id, $web_user->uid),
      "LdapAuthorizationConsumerOG authorizationRevoke() test revoke on custom member role role $faculty_dungeon_master_consumer_id", $this->ldapTestId);

    $og_students_consumer_id = ldap_authorization_og_authorization_id($og_students_node->nid, $member_rid, 'node');
    $og_auth->authorizationGrant($web_user, $user_data, array($og_students_consumer_id =>  $og_auth->emptyConsumer), $ldap_entry, TRUE);
    $this->assertTrue(ldap_authorization_og2_has_consumer_id($og_students_consumer_id, $web_user->uid),
      "LdapAuthorizationConsumerOG authorizationGrant() test grant on member role $og_students_consumer_id", $this->ldapTestId);

    $web_user = user_load($web_user->uid, TRUE);
    $result = $og_auth->authorizationRevoke($web_user, $user_data, array('node:454:44334'  => $og_auth->emptyConsumer), $ldap_entry, TRUE);
    $this->assertFalse($result,
      'LdapAuthorizationConsumerOG authorizationRevoke() test revoke of bogus authorization', $this->ldapTestId);

    $web_user = user_load($web_user->uid, TRUE);
    $result = $og_auth->authorizationGrant($web_user, $user_data, array('node:454:44334' => $og_auth->emptyConsumer), $ldap_entry, TRUE);
    $this->assertFalse($result,
      'LdapAuthorizationConsumerOG authorizationGrant() test grant of bogus authorization', $this->ldapTestId);

    $web_user = user_load($web_user->uid, TRUE);
    $result = $og_auth->authorizationRevoke($web_user, $user_data, array('bogusformat'), $ldap_entry, TRUE);
    $this->assertFalse($result,
      'LdapAuthorizationConsumerOG authorizationRevoke()  test revoke malformed params', $this->ldapTestId);

    $web_user = user_load($web_user->uid, TRUE);
    $result = $og_auth->authorizationGrant($web_user, $user_data, array('bogusformat'), $ldap_entry, TRUE);
    $this->assertFalse($result,
      'LdapAuthorizationConsumerOG authorizationGrant() test grant malformed params', $this->ldapTestId);


    
     * II.B. Also test function in ldap_authorization_og.module
    

    list($students_group, $group_entity_id) = ldap_authorization_og2_get_group_from_name('node', 'students');
    //debug("ldap_authorization_og2_get_group_from_name: students_group"); debug($students_group);
    $this->assertTrue($students_group->title == 'students', 'ldap_authorization_og2_get_group_from_name() function works', $this->ldapTestId);

    $test = ldap_authorization_og2_has_role($this->groupType, $og_gryffindor_node->nid, $web_user->uid, OG_ADMINISTRATOR_ROLE);
    $this->assertTrue($test, 'ldap_authorization_og2_has_role() function works', $this->ldapTestId);

    $test = ldap_authorization_og2_has_role($this->groupType, $og_students_node->nid, $web_user->uid, OG_ADMINISTRATOR_ROLE);
    $this->assertTrue($test === FALSE, 'ldap_authorization_og2_has_role() function fails with FALSE', $this->ldapTestId);
     */
  }
  
  /***
      * III. functional tests based on various configurations, without actual user logon process
      * (will need to be expanded when batch, feed, etc, processing is added, but those
      * functional tests should not need to done for all ldap consumer types.
      */
  function x_testAuthorizationsWithoutLogon() {

    $this->ldapTestId = $this->module_name . ': og authorizations on logon';
    // just to give warning if setup doesn't succeed.  may want to take these out at some point.
    $setup_success = (
        module_exists('ldap_authentication') &&
        module_exists('ldap_servers') &&
        module_exists('ldap_authorization') &&
        module_exists('ldap_authorization_drupal_role') &&
        module_exists('ldap_authorization_og') &&
        (variable_get('ldap_simpletest', 0) > 0)
      );
    $this->assertTrue($setup_success, ' ldap_authorizations og setup successful', $this->ldapTestId);

    $web_user = $this->drupalCreateUser();

    $this->ldapTestId = 'DeriveFromEntry';
    $this->serversData = 'ldapauthor1.ldap_server.test_data.inc';
    $this->authorizationData = 'Derivations.ldap_authorization_og.inc';
    $this->authenticationData = 'ldapauthor1.ldap_authentication.test_data.inc';
    $this->consumerType = 'og_group';
    $this->prepTestData('ad_authorization');

    $og_auth = new LdapAuthorizationConsumerOG('og_group');
 //   debug('og_auth'); debug($og_auth);
    $this->assertTrue(is_object($og_auth),
     'Successfully instantiated LdapAuthorizationConsumerOG', $this->ldapTestId);

    list($og_knitters, $og_knitters_node) = ldap_authorization_og_get_group('knitters', 'group_name', 'object');
    list($og_bakers, $og_bakers_node) = ldap_authorization_og_get_group('bakers', 'group_name', 'object');
    list($og_butchers, $og_butchers_node) = ldap_authorization_og_get_group('butchers', 'group_name', 'object');
    $anonymous_rid = ldap_authorization_og_rid_from_role_name(OG_ANONYMOUS_ROLE);
    $member_rid = ldap_authorization_og_rid_from_role_name(OG_AUTHENTICATED_ROLE);
    $admin_rid = ldap_authorization_og_rid_from_role_name(OG_ADMINISTRATOR_ROLE);
    $butcher_member_id = ldap_authorization_og_authorization_id($og_butchers->gid, $member_rid);
    $butcher_admin_id = ldap_authorization_og_authorization_id($og_butchers->gid, $admin_rid);
    $knitters_nonmember_id = ldap_authorization_og_authorization_id($og_knitters->gid, $anonymous_rid);
    $knitters_member_id = ldap_authorization_og_authorization_id($og_knitters->gid, $member_rid);
     /**
     * cn=unkool,ou=lost,dc=ad,dc=myuniveristy,dc=edu
     * should not match any mappings
     */

    $user = $this->drupalCreateUser(array());
    $unkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'unkool', 'mail' =>  'unkool@nowhere.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($unkool, 'query');  // just see if the correct ones are derived.
    $this->assertTrue(count($new_authorizations) == 0, 'user account unkool tested for granting no drupal roles ', $this->ldapTestId . '.nomatch');

    /**
     *   jkool:  guest accounts, cn=sysadmins,ou=it,dc=ad,dc=myuniveristy,dc=edu
     *    should yield: butchers member and butchers admin member
     */

    $user = $this->drupalCreateUser(array());
    $jkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'jkool', 'mail' =>  'jkool@guests.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'query');  // just see if the correct ones are derived.

    $correct_roles = (bool)(
      isset($new_authorizations['og_group']) &&
      in_array($butcher_member_id, $new_authorizations['og_group']) &&
      in_array($butcher_admin_id, $new_authorizations['og_group'])
    );
    if (!$correct_roles) {
      debug('jkool og ldap authorizations'); debug($new_authorizations); debug($new_authorizations);
    }
    $this->assertTrue($correct_roles, "user account jkool tested for granting og butchers member and admin ($butcher_member_id and $butcher_admin_id)", $this->ldapTestId . '.onematch');

    /**
      verykool: 'cn=sysadmins,ou=it,dc=ad,dc=myuniveristy,dc=edu', special guests, guest accounts
      should yield: butchers and knitters member roles
     */

    $user = $this->drupalCreateUser(array());
    $verykool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'verykool', 'mail' =>  'verykool@myuniversity.edu'), TRUE, $user);

    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($verykool, 'query');  // just see if the correct ones are derived.
   // debug('verykool og ldap authorizations'); debug($new_authorizations); debug($new_authorizations);
    $correct_roles = (bool)(isset($new_authorizations['og_group']) &&
      in_array($butcher_member_id, $new_authorizations[$this->consumerType]) &&
      in_array($knitters_member_id, $new_authorizations[$this->consumerType])
      );
    if (!$correct_roles) {
      debug('verykool og ldap authorizations'); debug($new_authorizations); debug($new_authorizations);
    }
    $this->assertTrue($correct_roles, "user account verykool tested for granting og knitters member ($knitters_member_id) and og butchers member ($butcher_member_id) ", $this->ldapTestId . '.manymatch');
    $this->assertTrue($correct_roles, 'user account verykool tested for case insensitivity ', $this->ldapTestId . '.caseinsensitive');
}

  /**
    * IV. Test authorizations granted on logon
    */
  function x_testAuthorizationsOnLogon() {

    $this->ldapTestId = $this->module_name . ': og authorizations on logon';
    // just to give warning if setup doesn't succeed.  may want to take these out at some point.
    $setup_success = (
        module_exists('ldap_authentication') &&
        module_exists('ldap_servers') &&
        module_exists('ldap_authorization') &&
        module_exists('ldap_authorization_drupal_role') &&
        module_exists('ldap_authorization_og') &&
        (variable_get('ldap_simpletest', 0) > 0)
      );
    $this->assertTrue($setup_success, ' ldap_authorizations og setup successful', $this->ldapTestId);

    $web_user = $this->drupalCreateUser();

    $this->ldapTestId = 'DeriveFromEntry';
    $this->serversData = 'ldapauthor1.ldap_server.test_data.inc';
    $this->authorizationData = 'Derivations.ldap_authorization_og.inc';
    $this->authenticationData = 'ldapauthor1.ldap_authentication.test_data.inc';
    $this->consumerType = 'og_group';
    $this->prepTestData('ad_authorization');

    $og_auth = new LdapAuthorizationConsumerOG('og_group');
    $this->assertTrue(is_object($og_auth),
     'Successfully instantiated LdapAuthorizationConsumerOG', $this->ldapTestId);

    list($og_knitters, $og_knitters_node) = ldap_authorization_og_get_group('knitters', 'group_name', 'object');
    list($og_bakers, $og_bakers_node) = ldap_authorization_og_get_group('bakers', 'group_name', 'object');
    list($og_butchers, $og_butchers_node) = ldap_authorization_og_get_group('butchers', 'group_name', 'object');
    $anonymous_rid = ldap_authorization_og_rid_from_role_name(OG_ANONYMOUS_ROLE);
    $member_rid = ldap_authorization_og_rid_from_role_name(OG_AUTHENTICATED_ROLE);
    $admin_rid = ldap_authorization_og_rid_from_role_name(OG_ADMINISTRATOR_ROLE);
    $butcher_member_id = ldap_authorization_og_authorization_id($og_butchers->gid, $member_rid);
    $butcher_admin_id = ldap_authorization_og_authorization_id($og_butchers->gid, $admin_rid);
    $knitters_nonmember_id = ldap_authorization_og_authorization_id($og_knitters->gid, $anonymous_rid);
    $knitters_member_id = ldap_authorization_og_authorization_id($og_knitters->gid, $member_rid);
    /**
      verykool: 'cn=sysadmins,ou=it,dc=ad,dc=myuniveristy,dc=edu', special guests, guest accounts
      should yield: 'gid=3,rid=3', 'gid=3,rid=2', group-name=knitters,role-name=member
     */
    $verykool = user_load_by_name('verykool');
    if (is_object($verykool)) {
      user_delete($verykool->uid);
    }

    $edit = array(
      'name' => 'verykool',
      'pass' => 'goodpwd',
    );

    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Member for'), 'New Ldap user with good password authenticated.', $this->ldapTestId);
    $this->assertTrue($this->testFunctions->ldapUserIsAuthmapped('verykool'), 'Ldap user properly authmapped.', $this->ldapTestId);

    $verykool = user_load_by_name('verykool');
    $existing_authorizations = $og_auth->usersAuthorizations($verykool);
    // debug('testAuthorizationsOnLogon verykool existing_authorizations'); debug($existing_authorizations);
    $correct_roles = in_array($butcher_member_id, $existing_authorizations) && in_array($knitters_member_id, $existing_authorizations);
    if (!$correct_roles) {
      debug('verykool og authorizations'); debug($existing_authorizations);
    }
    $this->assertTrue($correct_roles, 'verykool granted butcher and knitter memberships', $this->ldapTestId );

    $this->drupalGet('user/logout');


    /**
     *   jkool:  guest accounts, cn=sysadmins,ou=it,dc=ad,dc=myuniveristy,dc=edu
     *    should yield: 'gid=3,rid=2', 'gid=3,rid=3'
     */

    $user = $this->drupalCreateUser(array());
    $jkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'jkool', 'mail' =>  'jkool@guests.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'query');  // just see if the correct ones are derived.
   // debug('new_authorizations'); debug($new_authorizations);
    user_delete($jkool->uid);

    $edit = array(
       'name' => 'jkool',
       'pass' => 'goodpwd',
    );

    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Member for'), 'New Ldap user with good password authenticated.', $this->ldapTestId);
    $this->assertTrue($this->testFunctions->ldapUserIsAuthmapped('jkool'), 'Ldap user properly authmapped.', $this->ldapTestId);

    $jkool = user_load_by_name('jkool');
    $existing_authorizations = $og_auth->usersAuthorizations($jkool);
  //  debug('testAuthorizationsOnLogon jkool existing_authorizations');
  //  debug($existing_authorizations);
  //  debug('available consumer ids: ');
  //    debug($og_auth->availableConsumerIDs());
  //    debug($og_auth->convertToFriendlyAuthorizationIds($og_auth->availableConsumerIDs()));
    $correct_roles = in_array($butcher_admin_id, $existing_authorizations);
    if (!$correct_roles) {
      debug('jkool og authorizations'); debug($existing_authorizations);
    }
    $this->assertTrue($correct_roles, 'jkool granted admin role', $this->ldapTestId );

    $this->drupalGet('user/logout');


  }

}
