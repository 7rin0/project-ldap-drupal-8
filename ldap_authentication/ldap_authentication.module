<?php
// $Id$

/**
 * @file
 * This module injects itself into Drupal's Authentication stack.
 */

define('LDAP_AUTHENTICATION_PROJECT_TAG', 'ldap');

/**
 * Implementation of hook_menu().
 */
function ldap_authentication_menu() {
  $items = array();


  $items[LDAP_API_MENU_BASE_PATH .'/authentication'] = array(
    'title' => t('Authentication'),
    'description' => t('Configure LDAP Authentication'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_authentication_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'ldap_authentication.admin.inc',
  );
  
  return $items;
}


/**
 * Implements hook_ldap_api_permission().
 */
function ldap_authentication_ldap_api_permission() {
  return array('ldap_authentication' =>  'LDAP Authentication: Invervenes in authentication process to allow authentication against LDAP servers.');
}

    
/**
 * Implementation of hook_help().
 */

function ldap_authentication_help($path, $arg) {
  switch ($path) {
    case LDAP_API_MENU_BASE_PATH .'/authentication':
      $output = '<p>'. t('Some help text goes here.') .'</p>';
      return $output;

    case 'admin/help#ldap_authentication':
      $output = '<p>'. t('LDAP can also provide Authentication.') .'</p>';
      return $output;
  }
}

/**
  * Implementation of hook_info().
 */
function ldap_authentication_info($field = 0) {
  $info['name']= 'ldap_authentication';
  $info['protocol'] = 'LDAP';

  if ($field) {
    return $info[$field];
  }

  return $info;
}

/**
  * Implementation of hook_user().
  
  
  hook user is gone in d7
  
function ldap_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'update':
      if ($category == 'account' && isset($account->ldap_authentified)) {
        // LDAP Authentication is NEVER to be cached in Drupal's DB.
        $edit['pass'] = user_password();
      }
      break;
  }
}
**/

/**
 * Implementation of hook_form_FORM_ID_alter().
 
function ldap_authentication_form_user_register_alter(&$form, $form_state) {
  if (isset($_SESSION['ldap']['values'])) {
       // Auto-registration failed, attempt to prefill fields.
       $form['name']['#default_value'] = $_SESSION['ldap']['values']['name'];
       $form['mail']['#default_value'] = $_SESSION['ldap']['values']['mail'];
   }
      
}
*/
/**
 * Replacement for user_authenticate_validate().
 
function ldap_authentication_login_form_validate($form, &$form_state) {
  require_once('ldap_authentication.inc');
  _ldap_authentication_login_form_validate($form_state['values']);
}

*/
/**
 * Authenticate a user or attempt registration.

function ldap_authentication($user, $form_values = array()) {
  require_once('ldap_authentication.inc');
  _ldap_authentication($user, $form_values);
  }
   */

/** ====================  VARIOUS D7 LOGIN HOOKS TO PONDER ============================== **/

/**
 * Implements hook_user_login().
 *
 * The user just logged in.
 * 


function ldap_authentication_user_login(&$edit, $account) {
  
}
 */
/** === USER HOOKS (Related to creating and updateing user object ======== **/



/**
 * Implements hook_user_presave().
 *  A user account is about to be created or updated.


function ldap_authentication_user_presave(&$edit, $account, $category = NULL) {
  
}
 */

/**
 * Implements hook_user_insert().
 *
 * A user account was created.
 * The module should save its custom additions to the user object into the database.


function ldap_authentication_user_insert(&$edit, $account, $category) {
  
}
 */

/**
 *  Implements hook_user_update().
 *  
 *  A user account was updated.
 *  Modules may use this hook to update their user data in a custom storage after a user account has been updated.



function ldap_authentication_user_update($edit, $user, $category) {
  
}

 */

// vim:fenc=utf-8:ft=php:ai:si:ts=2:sw=2:et:
